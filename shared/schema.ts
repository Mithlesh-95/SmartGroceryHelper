import { pgTable, text, serial, integer, timestamp, boolean } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const groceryItems = pgTable("grocery_items", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  quantity: integer("quantity").notNull().default(0),
  unit: text("unit").notNull(),
  expiryDate: timestamp("expiry_date"),
  lowStockThreshold: integer("low_stock_threshold"),
  notificationSent: boolean("notification_sent").default(false),
  notes: text("notes"),
});

export const recipes = pgTable("recipes", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  ingredients: text("ingredients").array().notNull(),
  instructions: text("instructions").array().notNull(),
  imageUrl: text("image_url"),
  videoUrl: text("video_url"),
  preparationTime: integer("preparation_time"),
});

export const shoppingList = pgTable("shopping_list", {
  id: serial("id").primaryKey(),
  itemName: text("item_name").notNull(),
  quantity: integer("quantity").notNull(),
  unit: text("unit").notNull(),
  isPurchased: boolean("is_purchased").default(false),
  isAutoGenerated: boolean("is_auto_generated").default(false),
});

export const insertGroceryItemSchema = createInsertSchema(groceryItems)
  .omit({ id: true, notificationSent: true })
  .extend({
    expiryDate: z.string().optional().transform(val => val ? new Date(val) : null),
  });

export const insertRecipeSchema = createInsertSchema(recipes).omit({ id: true });
export const insertShoppingItemSchema = createInsertSchema(shoppingList).omit({ id: true });

export type GroceryItem = typeof groceryItems.$inferSelect;
export type Recipe = typeof recipes.$inferSelect;
export type ShoppingItem = typeof shoppingList.$inferSelect;

export type InsertGroceryItem = z.infer<typeof insertGroceryItemSchema>;
export type InsertRecipe = z.infer<typeof insertRecipeSchema>;
export type InsertShoppingItem = z.infer<typeof insertShoppingItemSchema>;