// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
var MemStorage = class {
  groceryItems;
  recipes;
  shoppingItems;
  currentIds;
  constructor() {
    this.groceryItems = /* @__PURE__ */ new Map();
    this.recipes = /* @__PURE__ */ new Map();
    this.shoppingItems = /* @__PURE__ */ new Map();
    this.currentIds = { groceryItems: 1, recipes: 1, shoppingItems: 1 };
    this.initializeSampleData();
  }
  initializeSampleData() {
    const sampleRecipes = [
      {
        name: "Classic Pancakes",
        description: "Fluffy homemade pancakes perfect for breakfast",
        ingredients: ["2 cups flour", "2 eggs", "1 cup milk", "2 tbsp sugar"],
        instructions: ["Mix dry ingredients", "Add wet ingredients", "Cook on griddle"],
        imageUrl: "https://images.unsplash.com/photo-1601315379734-425a469078de",
        videoUrl: "https://youtube.com/watch?v=123",
        preparationTime: 20
      },
      {
        name: "Garden Salad",
        description: "Fresh and healthy garden salad",
        ingredients: ["lettuce", "tomatoes", "cucumber", "olive oil"],
        instructions: ["Wash vegetables", "Chop ingredients", "Mix and serve"],
        imageUrl: "https://images.unsplash.com/photo-1512058454905-6b841e7ad132",
        videoUrl: "https://youtube.com/watch?v=456",
        preparationTime: 10
      }
    ];
    sampleRecipes.forEach((recipe) => this.createRecipe(recipe));
  }
  // Grocery Items
  async getGroceryItems() {
    return Array.from(this.groceryItems.values());
  }
  async getGroceryItem(id) {
    return this.groceryItems.get(id);
  }
  async createGroceryItem(item) {
    const id = this.currentIds.groceryItems++;
    const newItem = { ...item, id };
    this.groceryItems.set(id, newItem);
    return newItem;
  }
  async updateGroceryItem(id, item) {
    const existingItem = this.groceryItems.get(id);
    if (!existingItem) return void 0;
    const updatedItem = { ...existingItem, ...item };
    this.groceryItems.set(id, updatedItem);
    return updatedItem;
  }
  async deleteGroceryItem(id) {
    this.groceryItems.delete(id);
  }
  // Recipes
  async getRecipes() {
    return Array.from(this.recipes.values());
  }
  async getRecipe(id) {
    return this.recipes.get(id);
  }
  async createRecipe(recipe) {
    const id = this.currentIds.recipes++;
    const newRecipe = { ...recipe, id };
    this.recipes.set(id, newRecipe);
    return newRecipe;
  }
  // Shopping List
  async getShoppingList() {
    return Array.from(this.shoppingItems.values());
  }
  async createShoppingItem(item) {
    const id = this.currentIds.shoppingItems++;
    const newItem = { ...item, id };
    this.shoppingItems.set(id, newItem);
    return newItem;
  }
  async updateShoppingItem(id, item) {
    const existingItem = this.shoppingItems.get(id);
    if (!existingItem) return void 0;
    const updatedItem = { ...existingItem, ...item };
    this.shoppingItems.set(id, updatedItem);
    return updatedItem;
  }
  async deleteShoppingItem(id) {
    this.shoppingItems.delete(id);
  }
};
var storage = new MemStorage();

// shared/schema.ts
import { pgTable, text, serial, integer, timestamp, boolean } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
var groceryItems = pgTable("grocery_items", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  quantity: integer("quantity").notNull().default(0),
  unit: text("unit").notNull(),
  expiryDate: timestamp("expiry_date"),
  lowStockThreshold: integer("low_stock_threshold"),
  notificationSent: boolean("notification_sent").default(false),
  notes: text("notes")
});
var recipes = pgTable("recipes", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  ingredients: text("ingredients").array().notNull(),
  instructions: text("instructions").array().notNull(),
  imageUrl: text("image_url"),
  videoUrl: text("video_url"),
  preparationTime: integer("preparation_time")
});
var shoppingList = pgTable("shopping_list", {
  id: serial("id").primaryKey(),
  itemName: text("item_name").notNull(),
  quantity: integer("quantity").notNull(),
  unit: text("unit").notNull(),
  isPurchased: boolean("is_purchased").default(false),
  isAutoGenerated: boolean("is_auto_generated").default(false)
});
var insertGroceryItemSchema = createInsertSchema(groceryItems).omit({ id: true, notificationSent: true }).extend({
  expiryDate: z.string().optional().transform((val) => val ? new Date(val) : null)
});
var insertRecipeSchema = createInsertSchema(recipes).omit({ id: true });
var insertShoppingItemSchema = createInsertSchema(shoppingList).omit({ id: true });

// server/routes.ts
import { z as z2 } from "zod";
function registerRoutes(app2) {
  app2.get("/api/grocery-items", async (_req, res) => {
    const items = await storage.getGroceryItems();
    res.json(items);
  });
  app2.post("/api/grocery-items", async (req, res) => {
    try {
      const item = insertGroceryItemSchema.parse(req.body);
      const newItem = await storage.createGroceryItem(item);
      res.json(newItem);
    } catch (error) {
      if (error instanceof z2.ZodError) {
        res.status(400).json({ error: error.errors });
      } else {
        res.status(500).json({ error: "Internal server error" });
      }
    }
  });
  app2.patch("/api/grocery-items/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    try {
      const item = insertGroceryItemSchema.partial().parse(req.body);
      const updatedItem = await storage.updateGroceryItem(id, item);
      if (!updatedItem) {
        res.status(404).json({ error: "Item not found" });
        return;
      }
      res.json(updatedItem);
    } catch (error) {
      if (error instanceof z2.ZodError) {
        res.status(400).json({ error: error.errors });
      } else {
        res.status(500).json({ error: "Internal server error" });
      }
    }
  });
  app2.delete("/api/grocery-items/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    await storage.deleteGroceryItem(id);
    res.status(204).send();
  });
  app2.get("/api/recipes", async (_req, res) => {
    const recipes2 = await storage.getRecipes();
    res.json(recipes2);
  });
  app2.get("/api/recipes/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    const recipe = await storage.getRecipe(id);
    if (!recipe) {
      res.status(404).json({ error: "Recipe not found" });
      return;
    }
    res.json(recipe);
  });
  app2.get("/api/shopping-list", async (_req, res) => {
    const items = await storage.getShoppingList();
    res.json(items);
  });
  app2.post("/api/shopping-list", async (req, res) => {
    try {
      const item = insertShoppingItemSchema.parse(req.body);
      const newItem = await storage.createShoppingItem(item);
      res.json(newItem);
    } catch (error) {
      if (error instanceof z2.ZodError) {
        res.status(400).json({ error: error.errors });
      } else {
        res.status(500).json({ error: "Internal server error" });
      }
    }
  });
  app2.patch("/api/shopping-list/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    try {
      const item = insertShoppingItemSchema.partial().parse(req.body);
      const updatedItem = await storage.updateShoppingItem(id, item);
      if (!updatedItem) {
        res.status(404).json({ error: "Item not found" });
        return;
      }
      res.json(updatedItem);
    } catch (error) {
      if (error instanceof z2.ZodError) {
        res.status(400).json({ error: error.errors });
      } else {
        res.status(500).json({ error: "Internal server error" });
      }
    }
  });
  app2.delete("/api/shopping-list/:id", async (req, res) => {
    const id = parseInt(req.params.id);
    await storage.deleteShoppingItem(id);
    res.status(204).send();
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2, { dirname as dirname2 } from "path";
import { fileURLToPath as fileURLToPath2 } from "url";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
import path, { dirname } from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
import { fileURLToPath } from "url";
var __filename = fileURLToPath(import.meta.url);
var __dirname = dirname(__filename);
var vite_config_default = defineConfig({
  root: "client",
  // ✅ Ensures Vite looks in "client/"
  publicDir: "public",
  // ✅ Automatically uses "client/public"
  plugins: [react(), runtimeErrorOverlay(), themePlugin()],
  // ✅ Keeps all plugins active
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "client/src"),
      // ✅ Ensures "@/..." imports work
      "@shared": path.resolve(__dirname, "shared")
      // ✅ Keeps shared alias
    }
  },
  build: {
    outDir: "../dist",
    // ✅ Output to "dist" in project root
    emptyOutDir: true
    // ✅ Clears old builds
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var __filename2 = fileURLToPath2(import.meta.url);
var __dirname2 = dirname2(__filename2);
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        __dirname2,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(__dirname2, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const PORT = 5e3;
  server.listen(PORT, "0.0.0.0", () => {
    log(`serving on port ${PORT}`);
  });
})();
